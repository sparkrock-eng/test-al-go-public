# Workflow: Label AI-Assisted Percentage
# Required labels in repository:
#   - AI-Assisted: 10%  (Hex: FF0000) - Very low AI contribution
#   - AI-Assisted: 20%  (Hex: FF3300) - Low AI contribution
#   - AI-Assisted: 30%  (Hex: FF6600) - Moderate-low AI contribution
#   - AI-Assisted: 40%  (Hex: FF9900) - Moderate AI contribution
#   - AI-Assisted: 50%  (Hex: FFCC00) - Mid-point AI contribution
#   - AI-Assisted: 60%  (Hex: CCFF00) - Moderate-high AI contribution
#   - AI-Assisted: 70%  (Hex: 99FF00) - High AI contribution
#   - AI-Assisted: 80%  (Hex: 66FF00) - Very high AI contribution
#   - AI-Assisted: 90%  (Hex: 33FF00) - Near-max AI contribution
#   - AI-Assisted: 100% (Hex: 00FF00) - Fully AI-generated
# Summary:
#   Parses the “Manual Engineering rate: x%” from a pull request description
#   Calculates the corresponding AI rate rounded to the nearest 10% bucket (10%–100%)
#   Verifies that the matching AI-Assisted label exists
#   Removes any previous AI-Assisted labels
#   Applies the correct one, failing the check if parsing fails or labels are missing

name: Label AI-Assisted Percentage

permissions:
  issues: write
  pull-requests: write

on:
  pull_request:
    types: [opened, edited]

jobs:
  assign-ai-label:
    runs-on: ubuntu-latest

    steps:
      - name: Calculate & apply AI-Assisted label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // core, github & context are already available
            const { payload } = context;
            const pr = payload.pull_request || {};
            const body = pr.body || '';

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            // 1) Extract manual rate
            const match = body.match(/Manual Engineering rate:\s*(\d{1,3})%/i);
            if (!match) {
              core.setFailed('❌ Parsing error: no `Manual Engineering rate: x%` found in PR description.');
              return;
            }

            // 2) Validate range
            const manual = parseInt(match[1], 10);
            if (manual < 0 || manual > 100 || isNaN(manual)) {
              core.setFailed(`❌ Invalid Manual Engineering rate: \`${manual}%\` (must be between 0 and 100).`);
              return;
            }

            // 3) Compute AI rate and snap to 10% buckets
            const rawAi = 100 - manual;
            let aiBucket = Math.round(rawAi / 10) * 10;
            if (aiBucket < 10) aiBucket = 10;
            if (aiBucket > 100) aiBucket = 100;
            const newLabel = `AI-Assisted: ${aiBucket}%`;

            // 4) Remove any old AI-Assisted:*% labels
            for (const lbl of pr.labels.map(l => l.name)) {
              if (/^AI-Assisted:\s*\d+%$/.test(lbl) && lbl !== newLabel) {
                await github.rest.issues.removeLabel({ owner, repo, issue_number, name: lbl });
              }
            }

            // 5) Verify that the target label already exists
            try {
              await github.rest.issues.getLabel({ owner, repo, name: newLabel });
            } catch {
              core.setFailed(`❌ Missing label: \`${newLabel}\` does not exist in this repository.`);
              return;
            }

            // 6) Apply the correct label
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number,
              labels: [newLabel]
            });

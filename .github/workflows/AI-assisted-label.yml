name: Label AI-Assisted Percentage

permissions:
  issues: write
  pull-requests: write

on:
  pull_request:
    types: [opened, edited]

jobs:
  assign-ai-label:
    runs-on: ubuntu-latest

    steps:
      - name: Calculate & apply AI-Assisted label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const { payload, repo, issue } = context;
            const pr = payload.pull_request || {};
            const body = pr.body || '';

            // 1) Extract manual rate
            const match = body.match(/Manual Engineering rate:\s*(\d{1,3})%/i);
            if (!match) {
              await github.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue.number,
                body: '⚠️ **Error:** Cannot find `Manual Engineering rate: x%`. Please include a line like `Manual Engineering rate: 30%` in your description.'
              });
              core.setFailed('Manual Engineering rate not found.');
              return;
            }

            const manual = parseInt(match[1], 10);
            if (manual < 0 || manual > 100) {
              await github.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue.number,
                body: `⚠️ **Error:** Manual Engineering rate \`${manual}%\` is out of range. Must be between 0 and 100.`
              });
              core.setFailed('Manual Engineering rate out of range.');
              return;
            }

            // 2) Compute AI rate and round to nearest 10%
            const rawAi = 100 - manual;
            let aiBucket = Math.round(rawAi / 10) * 10;
            if (aiBucket < 10) aiBucket = 10;
            if (aiBucket > 100) aiBucket = 100;
            const newLabel = `AI-Assisted: ${aiBucket}%`;

            // 3) Remove any old AI-Assisted:*% labels
            const existing = pr.labels.map(l => l.name);
            for (const lbl of existing) {
              if (/^AI-Assisted:\s*\d+%$/.test(lbl) && lbl !== newLabel) {
                await github.issues.removeLabel({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: issue.number,
                  name: lbl
                });
              }
            }

            // 4) Verify label exists (error if missing)
            try {
              await github.issues.getLabel({
                owner: repo.owner,
                repo: repo.repo,
                name: newLabel
              });
            } catch {
              await github.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue.number,
                body: `⚠️ **Error:** Required label \`${newLabel}\` does not exist in this repository. Please create it before using this workflow.`
              });
              core.setFailed(`Label ${newLabel} not found.`);
              return;
            }

            // 5) Apply the correct label
            await github.issues.addLabels({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue.number,
              labels: [newLabel]
            });
